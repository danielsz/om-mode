* Om-mode

Om-mode is a minor mode that provides the following:

- Insert a template for an Om component.
- The template include all the Om life cycle protocols.
- Jump back and forth between positions in the template.
- User-configurable abbrev that will expand the template.

** Installation

*** MELPA

#+BEGIN_SRC emacs-lisp
M-x package-install RET om-mode
#+END_SRC

Please make sure you have Marmalade or MELPA in your package archives.

#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))
#+END_SRC

***  Manual

Just put *om-mode.el* anywhere on your load path (or load the file manually). *M-x om-mode* will toggle it on and off.

*** Init file

This minor mode makes sense only for Clojurescript, however there doesn’t seem to be a hook specific to Clojurescript. There is an open [[https://github.com/clojure-emacs/cider/issues/798][issue]] on Cider’s github on this.

In the meantime, if you want to load *om-mode* everytime you’re editing Clojurescript, this is the best that comes to mind:

#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook 'om-mode)
#+END_SRC

** Usage

Invoke the template with *M-x insert-om-template*.
Alternatively, type “om” and automatic expansion will occur. 
For this to work, either turn on *abbrev-mode* in the buffer, or put *(setq-default abbrev-mode t)* in your init file.
After template insertion, *next-line* and *previous-line* will jump to places of interest in the template. When you’ve finished editing the template, invoke *M-x exit-om-edit* to reclaim the usual bindings associated with *next-line* and *previous-line* (*C-n* and *C-p*, typically).

Type *M-x customize-group RET om-mode* to change the abbreviation to expand the template. The default is “om”.

** Contributing

I will gladly accept pull requests with enhancements, features, refactorings, alternate implementations.

1. Fork the repository.
2. Make changes.
3. Submit a pull request.


** Credits

I wish to thank Steve Purcell (@purcell) for his guidance and expertise.
